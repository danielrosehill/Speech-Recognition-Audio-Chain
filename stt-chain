#!/usr/bin/env bash
#
# STT Audio Chain Control Script
# Manages the PipeWire filter chain for speech-to-text microphone processing
#

set -euo pipefail

CONF_SOURCE="$(dirname "$(readlink -f "$0")")/stt-audio-chain.conf"
CONF_TARGET="$HOME/.config/pipewire/pipewire.conf.d/stt-audio-chain.conf"
CHAIN_NAME="STT Microphone Audio Chain"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_usage() {
    cat <<EOF
Usage: $(basename "$0") {start|stop|restart|status|install}

Commands:
    start       Start the STT audio processing chain
    stop        Stop the STT audio processing chain
    restart     Restart (reload) the audio processing chain
    status      Show current status of the audio chain
    install     Install configuration file to PipeWire config directory

EOF
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

print_success() {
    echo -e "${GREEN}[OK]${NC} $*"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $*"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

check_pipewire() {
    if ! systemctl --user is-active --quiet pipewire; then
        print_error "PipeWire is not running"
        print_info "Start PipeWire with: systemctl --user start pipewire"
        return 1
    fi
    return 0
}

install_config() {
    print_info "Installing STT audio chain configuration..."

    if [[ ! -f "$CONF_SOURCE" ]]; then
        print_error "Configuration file not found: $CONF_SOURCE"
        return 1
    fi

    # Create config directory if it doesn't exist
    mkdir -p "$(dirname "$CONF_TARGET")"

    # Copy configuration
    cp "$CONF_SOURCE" "$CONF_TARGET"
    print_success "Configuration installed to: $CONF_TARGET"

    print_info "Restarting PipeWire to load configuration..."
    systemctl --user restart pipewire
    sleep 2

    if check_chain_loaded; then
        print_success "STT audio chain loaded successfully"
    else
        print_warning "Chain may not have loaded. Check status with: $0 status"
    fi
}

check_chain_loaded() {
    pw-cli ls Node 2>/dev/null | grep -q "$CHAIN_NAME"
}

get_chain_id() {
    pw-cli ls Node 2>/dev/null | grep -B 1 "$CHAIN_NAME" | head -n 1 | grep -oP 'id \K[0-9]+'
}

start_chain() {
    print_info "Starting STT audio chain..."

    check_pipewire || return 1

    if [[ ! -f "$CONF_TARGET" ]]; then
        print_warning "Configuration not installed"
        print_info "Run: $0 install"
        return 1
    fi

    if check_chain_loaded; then
        print_success "STT audio chain is already running"
        show_status
        return 0
    fi

    # Reload PipeWire configuration
    systemctl --user restart pipewire
    sleep 2

    if check_chain_loaded; then
        print_success "STT audio chain started"
        show_status
    else
        print_error "Failed to start audio chain"
        print_info "Check PipeWire logs: journalctl --user -u pipewire -n 50"
        return 1
    fi
}

stop_chain() {
    print_info "Stopping STT audio chain..."

    if [[ ! -f "$CONF_TARGET" ]]; then
        print_warning "Configuration not installed, nothing to stop"
        return 0
    fi

    if ! check_chain_loaded; then
        print_success "STT audio chain is already stopped"
        return 0
    fi

    # Remove configuration and restart PipeWire
    mv "$CONF_TARGET" "$CONF_TARGET.disabled"
    systemctl --user restart pipewire
    sleep 2

    if ! check_chain_loaded; then
        print_success "STT audio chain stopped"
        print_info "Configuration disabled (renamed to .disabled)"
    else
        print_error "Failed to stop audio chain"
        return 1
    fi
}

restart_chain() {
    print_info "Restarting STT audio chain..."

    # Re-enable if it was disabled
    if [[ -f "$CONF_TARGET.disabled" ]] && [[ ! -f "$CONF_TARGET" ]]; then
        mv "$CONF_TARGET.disabled" "$CONF_TARGET"
    fi

    systemctl --user restart pipewire
    sleep 2

    if check_chain_loaded; then
        print_success "STT audio chain restarted"
        show_status
    else
        print_error "Failed to restart audio chain"
        return 1
    fi
}

show_status() {
    echo ""
    echo "=========================================="
    echo "STT Audio Chain Status"
    echo "=========================================="
    echo ""

    # Check if PipeWire is running
    if systemctl --user is-active --quiet pipewire; then
        print_success "PipeWire: running"
    else
        print_error "PipeWire: not running"
        return 1
    fi

    # Check if config is installed
    if [[ -f "$CONF_TARGET" ]]; then
        print_success "Configuration: installed"
    elif [[ -f "$CONF_TARGET.disabled" ]]; then
        print_warning "Configuration: disabled"
    else
        print_warning "Configuration: not installed"
    fi

    # Check if chain is loaded
    if check_chain_loaded; then
        print_success "Audio chain: loaded"

        chain_id=$(get_chain_id)
        if [[ -n "$chain_id" ]]; then
            echo ""
            print_info "Chain Node ID: $chain_id"
        fi

        echo ""
        echo "Available nodes:"
        pw-cli ls Node 2>/dev/null | grep -A 5 "STT" || true
    else
        print_warning "Audio chain: not loaded"
    fi

    echo ""
    echo "=========================================="
}

# Main command handler
case "${1:-}" in
    start)
        start_chain
        ;;
    stop)
        stop_chain
        ;;
    restart)
        restart_chain
        ;;
    status)
        show_status
        ;;
    install)
        install_config
        ;;
    *)
        print_usage
        exit 1
        ;;
esac
